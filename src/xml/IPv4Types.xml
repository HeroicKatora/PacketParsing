<?xml version="1.1" encoding="UTF-8"?>
<gpp:pacparse xmlns="http://github.com/HeroicKatora/PacketParsing"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:gpp="http://github.com/HeroicKatora/PacketParsing"
	xmlns:std="http://github.com/HeroicKatora/PacketParsing/Standard"
	xsi:schemaLocation="http://github.com/HeroicKatora/PacketParsing https://raw.githubusercontent.com/HeroicKatora/PacketParsing/master/schemes/PacketSchema.xsd
						http://github.com/HeroicKatora/PacketParsing/Standard https://github.com/HeroicKatora/PacketParsing/blob/master/schemes/PacketSchema.xsd"
	document_name="IPv4Types">

	<gpp:import module="gpp.ip.v4">
		<gpp:instantiator_import instance_name="ipVersion" name="IP_Version_Fictional"/>
		<gpp:instantiator_import instance_name="ipTOS" name="IP_TOS"/>
		<gpp:instantiator_import instance_name="ipID" name="IP_ID"/>
		<gpp:instantiator_import instance_name="ipChecksum" name="IP_Checksum"/>
		<gpp:instantiator_import instance_name="ipAddressDisplay" name="IP_Address_Display"/>
	</gpp:import>

	<gpp:include library_name="gpp.standard" document_name="StandardDocument">
		<gpp:type_include instance_name="integer" name="integral"/>
		<gpp:type_include instance_name="char" name="char"/>
	</gpp:include>

	<type name="IP_Version">
		<iohandle>
			<std:integral subtype="4bit"/>
		</iohandle>
		<displayhandle>
			<std:enumeration>
				<std:enum_fallback>
					<std:display_integral formatstring="{:x}"/>
				</std:enum_fallback>
				<std:enumvalue mnemonic="IP_v4">
					<gpp:parsed value="0x04">
						<gpp:type_ref ref_name="integral"/>
					</gpp:parsed>
				</std:enumvalue>
				<std:enumvalue mnemonic="IP_v6">
					<gpp:parsed value="0x06">
						<gpp:type_ref ref_name="integral"/>
					</gpp:parsed>
				</std:enumvalue>
				<std:enumvalue mnemonic="IP_vMaU">
					<builtin implementor="IP_Version_Fictional"/>
				</std:enumvalue>
			</std:enumeration>
		</displayhandle>
	</type>

	<type name="IP_HL">
		<typehandle>
			<std:integral subtype="4bit" formatstring="{:d}"/>
		</typehandle>
	</type>

	<type name="IP_TOS">
		<iohandle>
			<std:integral subtype="byte"/>
		</iohandle>
		<displayhandle>
			<builtin implementor="IP_TOS"/>
		</displayhandle>
	</type>

	<type name="IP_Length">
		<typehandle>
			<std:integral subtype="uint16" formatstring="{:d} header quad bytes"/>
		</typehandle>
	</type>

	<type name="IP_ID">
		<typehandle>
			<std:integral subtype="uint16" formatstring="{:x}"/>
		</typehandle>
	</type>

	<type name="IP_Flags">
		<iohandle>
			<std:integral subtype="3bit"/>
		</iohandle>
		<displayhandle>
			<builtin implementor="IP_ID"/>
		</displayhandle>
	</type>

	<type name="IP_Frag">
		<typehandle>
			<std:integral subtype="13bit" formatstring="{:x}"/>
		</typehandle>
	</type>

	<type name="IP_TTL">
		<typehandle>
			<std:integral subtype="byte" formatstring="{:d}"/>
		</typehandle>
	</type>

	<type name="IP_Protocol">
		<iohandle>
			<std:integral subtype="byte"/>
		</iohandle>
		<displayhandle>
			<std:enumeration>
				<std:enum_fallback>
					<std:display_integral formatstring="{:x}"/>
				</std:enum_fallback>
				<std:enumvalue>
					<gpp:parsed value="4"><type_ref ref_name="integral"/></gpp:parsed>
				</std:enumvalue>
				<!-- Implement the protocol values -->
			</std:enumeration>
		</displayhandle>
	</type>

	<type name="IP_Checksum">
		<iohandle>
			<std:integral subtype="uint16"/>
		</iohandle>
		<displayhandle>
			<builtin implementor="IP_Checksum"/>
		</displayhandle>
	</type>

	<type name="IP_Address">
		<iohandle>
			<std:integral subtype="uint32"/>
		</iohandle>
		<displayhandle>
			<builtin implementor="IP_Address_Display"/>
		</displayhandle>
	</type>

	<gpp:global_module name="IPv4_header">
		<std:sequence>
			<gpp:submodule pythonname="version">
				<std:field type="IP_Version">
					<parsed value="4"><type_ref ref_name="integral"/></parsed>
				</std:field>
			</gpp:submodule>
			<gpp:submodule pythonname="ip_header_length">
				<std:field displayname="IP Header Length" type="IP_HL"/>
			</gpp:submodule>
			<gpp:submodule pythonname="type_of_service">
				<std:field displayname="Type of Service" type="IP_TOS"/>
			</gpp:submodule>
			<gpp:submodule pythonname="total_length">
				<std:field displayname="Total Length" type="IP_Length"/>
			</gpp:submodule>
			<gpp:submodule pythonname="id">
				<std:field displayname="Identification" type="IP_ID"/>
			</gpp:submodule>
			<gpp:submodule pythonname="flags">
				<std:field displayname="Flags" type="IP_Flags"/>
			</gpp:submodule>
			<gpp:submodule pythonname="fragment_offset">
				<std:field displayname="Fragment Offset" type="IP_Frag"/>
			</gpp:submodule>
			<gpp:submodule pythonname="ttl">
				<std:field  displayname="Time to Live" type="IP_TTL"/>
			</gpp:submodule>
			<gpp:submodule pythonname="protocol">
				<std:field displayname="Protocol" type="IP_Protocol"/>
			</gpp:submodule>
			<gpp:submodule pythonname="checksum">
				<std:field  displayname="Header Checksum" type="IP_Checksum"/>
			</gpp:submodule>
			<gpp:submodule pythonname="source">
				<std:field displayname="Source address" type="IP_Address"/>
			</gpp:submodule>
			<gpp:submodule pythonname="destination">
				<std:field displayname="Destination address" type="IP_Address"/>
			</gpp:submodule>
		</std:sequence>
	</gpp:global_module>

	<gpp:global_module name="IPv4">
		<std:sequence>
			<gpp:submodule pythonname="header">
				<gpp:module_ref ref_name="IPv4_header"/>
			</gpp:submodule>
		</std:sequence>
	</gpp:global_module>
</gpp:pacparse>
