<?xml version="1.1" encoding="UTF-8"?>
<xs:schema xmlns="http://github.com/HeroicKatora/PacketParsing"
	targetNamespace="http://github.com/HeroicKatora/PacketParsing"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:gpp="http://github.com/HeroicKatora/PacketParsing"
	elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xs:simpleType name="python_identifier">
		<xs:annotation><xs:documentation>A simple, single python identifier</xs:documentation></xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="([a-zA-Z_])([a-zA-Z0-9_])*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="packet_parsing_identifier">
		<xs:annotation><xs:documentation>An identifier for packet parsing. It is less restrictive than a python identifier</xs:documentation></xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[a-zA-Z0-9_ ]+"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="python_module_path">
		<xs:annotation><xs:documentation>A python path of module</xs:documentation></xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="([a-zA-Z_])([a-zA-Z0-9_])*(\.([a-zA-Z_])([a-zA-Z0-9_])*)*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="file_name">
		<xs:annotation><xs:documentation>Allowed file names for xml specification files</xs:documentation></xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[^/]+"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="builtin">
		<xs:complexType>
	    	<xs:annotation><xs:documentation>Marks something as builtin and not specified in the XML document. This can be used to implement custom behaviour.</xs:documentation></xs:annotation>
	    	<xs:sequence><!-- Does not have any contents --></xs:sequence>
	    	<xs:attribute name="implementor" type="packet_parsing_identifier" use="required">
	    		<xs:annotation><xs:documentation>The type which implements this, it must be imported in the import segment.</xs:documentation></xs:annotation>
	    	</xs:attribute>
	    </xs:complexType>
    </xs:element>

	<xs:element name="direct_builtin">
		<xs:complexType>
			<xs:attributeGroup ref="direct_builtin"/>
		</xs:complexType>
	</xs:element>

    <xs:attributeGroup name="direct_builtin">
   		<xs:annotation><xs:documentation>Import a builtin directly without naming it first</xs:documentation></xs:annotation>
   		<xs:attribute name="module" type="python_module_path"/>
   		<xs:attribute name="implementor" type="python_identifier"/>
   	</xs:attributeGroup>

	<xs:element name="pacparse">
    <xs:complexType>
    	<xs:sequence>
    		<xs:element ref="import" minOccurs="0" maxOccurs="unbounded"/>
    		<xs:element ref="include" minOccurs="0" maxOccurs="unbounded"/>
  	 		<xs:choice minOccurs="0" maxOccurs="unbounded">
    			<xs:element ref="io_operator"/>
					<xs:element ref="display"/>
    			<xs:element ref="parser"/>
    			<xs:element ref="printer"/>
    			<xs:element ref="reader"/>
    			<xs:element ref="writer"/>
    			<xs:element ref="type"/>
    			<xs:element ref="global_module"/>
	  		</xs:choice>
	  	</xs:sequence>
			<xs:attribute name="document_name" type="packet_parsing_identifier" use="required"/>
	  </xs:complexType>
		<xs:key name="key_python_object_name">
			<xs:selector xpath="gpp:import/gpp:instantiator_import"/>
			<xs:field xpath="@name"/>
		</xs:key>

		<xs:key name="key_type_name">
			<xs:selector xpath="gpp:type|gpp:include/gpp:type_include"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="key_io_name">
			<xs:selector xpath="gpp:io_operator|gpp:include/gpp:io_include"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="key_writer_name">
			<xs:selector xpath="gpp:writer|gpp:include/gpp:writer_include"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="key_reader_name">
			<xs:selector xpath="gpp:reader|gpp:include/gpp:reader_include"/>
			<xs:field xpath="@name"/>
		</xs:key>
	    <xs:key name="key_display_name">
			<xs:selector xpath="gpp:display|gpp:include/gpp:display_include"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="key_parser_name">
			<xs:selector xpath="gpp:parser|gpp:include/gpp:parser_include"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="key_printer_name">
			<xs:selector xpath="gpp:printer|gpp:include/gpp:printer_include"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="key_global_field_name">
			<xs:selector xpath="gpp:global_field"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="key_global_group_name">
			<xs:selector xpath="gpp:global_group"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="key_global_module_name">
			<xs:selector xpath="gpp:global_module"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="key_packet_name">
			<xs:selector xpath="gpp:packet"/>
			<xs:field xpath="@name"/>
		</xs:key>

		<xs:keyref name="ref_python_object_name" refer="key_python_object_name">
	    	<xs:selector xpath=".//gpp:builtin"/>
	    	<xs:field xpath="@implementor"/>
	    </xs:keyref>
	    <xs:keyref name="ref_type_name" refer="key_type_name">
	    	<xs:selector xpath=".//gpp:type_ref"/>
	    	<xs:field xpath="@ref_name"/>
	    </xs:keyref>
	    <xs:keyref name="ref_io_name" refer="key_io_name">
	    	<xs:selector xpath=".//gpp:io_ref"/>
	    	<xs:field xpath="@ref_name"/>
	    </xs:keyref>
	    <xs:keyref name="ref_reader_name" refer="key_reader_name">
	    	<xs:selector xpath=".//gpp:reader_ref"/>
	    	<xs:field xpath="@ref_name"/>
	    </xs:keyref>
	    <xs:keyref name="ref_writer_name" refer="key_writer_name">
	    	<xs:selector xpath=".//gpp:writer_ref"/>
	    	<xs:field xpath="@ref_name"/>
	    </xs:keyref>
	    <xs:keyref name="ref_display_name" refer="key_display_name">
	    	<xs:selector xpath=".//gpp:display_ref"/>
	    	<xs:field xpath="@ref_name"/>
	    </xs:keyref>
	    <xs:keyref name="ref_parser_name" refer="key_parser_name">
	    	<xs:selector xpath=".//gpp:parser_ref"/>
	    	<xs:field xpath="@ref_name"/>
	    </xs:keyref>
	    <xs:keyref name="ref_printer_name" refer="key_printer_name">
	    	<xs:selector xpath=".//gpp:printer_ref"/>
	    	<xs:field xpath="@ref_name"/>
	    </xs:keyref>
	    <xs:keyref name="ref_field_type" refer="key_type_name">
	    	<xs:selector xpath=".//gpp:field"/>
	    	<xs:field xpath="@type"/>
	    </xs:keyref>
	    <xs:keyref name="ref_global_field" refer="key_global_field_name">
	    	<xs:selector xpath=".//gpp:field_ref"/>
	    	<xs:field xpath="@ref"/>
	    </xs:keyref>
	    <xs:keyref name="ref_global_group" refer="key_global_group_name">
	    	<xs:selector xpath=".//gpp:group_ref"/>
	    	<xs:field xpath="@ref"/>
	    </xs:keyref>
	    <xs:keyref name="ref_global_module" refer="key_global_module_name">
	    	<xs:selector xpath=".//gpp:module_ref"/>
	    	<xs:field xpath="@ref"/>
	    </xs:keyref>
	    <xs:keyref name="ref_packet" refer="key_packet_name">
	    	<xs:selector xpath=".//gpp:packet_ref"/>
	    	<xs:field xpath="@ref"/>
	    </xs:keyref>

	</xs:element>

	<xs:element name="instantiator_import">
		<xs:complexType>
			<xs:annotation><xs:documentation>Imports a python object which instantiates a type</xs:documentation></xs:annotation>
			<xs:attribute name="instance_name" type="python_identifier" use="required">
				<xs:annotation><xs:documentation>The name of the python object</xs:documentation></xs:annotation>
			</xs:attribute>
			<xs:attribute name="name" type="packet_parsing_identifier" use="required">
				<xs:annotation><xs:documentation>The alias in this document</xs:documentation></xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name="import">
		<xs:complexType>
			<xs:annotation><xs:documentation>Specifies a python module to import from, imports can either be a single type or a whole library</xs:documentation></xs:annotation>
			<xs:sequence>
				<xs:element ref="instantiator_import" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="module" type="python_module_path" use="required"/>
		</xs:complexType>
	</xs:element>

	<xs:complexType name="def_include">
		<xs:annotation><xs:documentation>Specifies a packet object to include from another document</xs:documentation></xs:annotation>
		<xs:attribute name="instance_name" type="packet_parsing_identifier" use="required">
			<xs:annotation><xs:documentation>The name of the object in the other document</xs:documentation></xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" type="packet_parsing_identifier" use="required">
			<xs:annotation><xs:documentation>The alias of the object in this document</xs:documentation></xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:element name="type_include" type="def_include"/>
	<xs:element name="io_include" type="def_include"/>
	<xs:element name="writer_include" type="def_include"/>
	<xs:element name="reader_include" type="def_include"/>
	<xs:element name="display_include" type="def_include"/>
	<xs:element name="parser_include" type="def_include"/>
	<xs:element name="printer_include" type="def_include"/>
	<xs:element name="global_module_include" type="def_include"/>

	<xs:element name="include">
		<xs:complexType>
			<xs:annotation><xs:documentation>Specifies a file from which to include other packet objects</xs:documentation></xs:annotation>
			<xs:sequence>
				<xs:choice minOccurs="1" maxOccurs="unbounded">
					<xs:element ref="type_include"/>
					<xs:element ref="io_include"/>
					<xs:element ref="writer_include"/>
					<xs:element ref="reader_include"/>
					<xs:element ref="display_include"/>
					<xs:element ref="parser_include"/>
					<xs:element ref="printer_include"/>
					<xs:element ref="global_module_include"/>
				</xs:choice>
			</xs:sequence>
			<xs:attribute name="document_name" type="packet_parsing_identifier" use="required">
				<xs:annotation><xs:documentation>File name of another source document</xs:documentation></xs:annotation>
			</xs:attribute>
			<xs:attribute name="library_name" type="packet_parsing_identifier" use="optional">
				<xs:annotation><xs:documentation>Descriptor for the source of the other document</xs:documentation></xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:complexType name="packet_object_ref">
		<xs:annotation><xs:documentation>References another packet object. Don't make cylic references, they should be detected at runtime</xs:documentation></xs:annotation>
		<xs:attribute name="ref_name" type="packet_parsing_identifier" use="required"/>
	</xs:complexType>

	<xs:element name="type_ref" type="packet_object_ref"/>
	<xs:element name="io_ref" type="packet_object_ref"/>
	<xs:element name="reader_ref" type="packet_object_ref"/>
	<xs:element name="writer_ref" type="packet_object_ref"/>
	<xs:element name="display_ref" type="packet_object_ref"/>
	<xs:element name="printer_ref" type="packet_object_ref"/>
	<xs:element name="parser_ref" type="packet_object_ref"/>

	<xs:complexType name="handle">
		<xs:annotation><xs:documentation>An xml element that specifies a handler to be constructed</xs:documentation></xs:annotation>
		<xs:sequence>
			<xs:any minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:anyAttribute/>
    </xs:complexType>

	<xs:element name="type_basehandler" type="handle" abstract="true"/>
	<xs:element name="io_basehandler" type="handle" abstract="true"/>
	<xs:element name="reader_basehandler" type="handle" abstract="true"/>
	<xs:element name="writer_basehandler" type="handle" abstract="true"/>
	<xs:element name="display_basehandler" type="handle" abstract="true"/>
	<xs:element name="printer_basehandler" type="handle" abstract="true"/>
	<xs:element name="parser_basehandler" type="handle" abstract="true"/>

    <xs:complexType name="type_handle_descriptor">
   		<xs:choice>
   			<xs:element ref="builtin"/>
   			<xs:element ref="type_ref"/>
   			<xs:element ref="type_basehandler"/>
   		</xs:choice>
    </xs:complexType>

    <xs:complexType name="io_handle_descriptor">
   		<xs:choice>
   			<xs:element ref="builtin"/>
   			<xs:element ref="type_ref"/>
   			<xs:element ref="type_basehandler"/>
   			<xs:element ref="io_ref"/>
   			<xs:element ref="io_basehandler"/>
   		</xs:choice>
    </xs:complexType>

    <xs:complexType name="reader_handle_descriptor">
   		<xs:choice>
   			<xs:element ref="builtin"/>
   			<xs:element ref="type_ref"/>
   			<xs:element ref="type_basehandler"/>
   			<xs:element ref="io_ref"/>
   			<xs:element ref="io_basehandler"/>
   			<xs:element ref="reader_ref"/>
   			<xs:element ref="reader_basehandler"/>
   		</xs:choice>
    </xs:complexType>

    <xs:complexType name="writer_handle_descriptor">
   		<xs:choice>
   			<xs:element ref="builtin"/>
   			<xs:element ref="type_ref"/>
   			<xs:element ref="type_basehandler"/>
   			<xs:element ref="io_ref"/>
   			<xs:element ref="io_basehandler"/>
   			<xs:element ref="writer_ref"/>
   			<xs:element ref="writer_basehandler"/>
   		</xs:choice>
    </xs:complexType>

	<xs:complexType name="display_handle_descriptor">
   		<xs:choice>
   			<xs:element ref="builtin"/>
   			<xs:element ref="type_ref"/>
   			<xs:element ref="type_basehandler"/>
   			<xs:element ref="display_ref"/>
   			<xs:element ref="display_basehandler"/>
   		</xs:choice>
    </xs:complexType>

    <xs:complexType name="printer_handle_descriptor">
   		<xs:choice>
   			<xs:element ref="builtin"/>
   			<xs:element ref="type_ref"/>
   			<xs:element ref="type_basehandler"/>
   			<xs:element ref="display_ref"/>
   			<xs:element ref="display_basehandler"/>
   			<xs:element ref="printer_ref"/>
   			<xs:element ref="printer_basehandler"/>
   		</xs:choice>
    </xs:complexType>

    <xs:complexType name="parser_handle_descriptor">
   		<xs:choice>
   			<xs:element ref="builtin"/>
   			<xs:element ref="type_ref"/>
   			<xs:element ref="type_basehandler"/>
   			<xs:element ref="io_ref"/>
   			<xs:element ref="io_basehandler"/>
   			<xs:element ref="parser_ref"/>
   			<xs:element ref="parser_basehandler"/>
   		</xs:choice>
    </xs:complexType>

	<xs:element name="type">
		<xs:complexType>
	   		<xs:annotation><xs:documentation>A type describes input/output and prints/parses data</xs:documentation></xs:annotation>
	   		<xs:choice>
	   			<xs:element ref="builtin"/>
	   			<xs:element ref="typehandle"/>
	   			<xs:sequence>
	   				<xs:group ref="iogroup"/>
	   				<xs:group ref="displaygroup"/>
	   			</xs:sequence>
	   		</xs:choice>
	   		<xs:attribute name="name" type="packet_parsing_identifier" use="required"/>
	    </xs:complexType>
	</xs:element>

	<xs:element name="display">
		<xs:complexType>
	    	<xs:annotation><xs:documentation>A display is a union of a parser and a printer</xs:documentation></xs:annotation>
	    	<xs:choice>
	   			<xs:element ref="builtin"/>
   				<xs:group ref="displaygroup"/>
	   		</xs:choice>
	   		<xs:attribute name="name" type="packet_parsing_identifier" use="required"/>
	    </xs:complexType>
	</xs:element>

    <xs:element name="io_operator">
	    <xs:complexType>
	    	<xs:annotation><xs:documentation>An io_operator is a union of a reader and a writer</xs:documentation></xs:annotation>
	    	<xs:choice>
	    		<xs:element ref="builtin"/>
	  			<xs:group ref="iogroup"/>
	  		</xs:choice>
	   		<xs:attribute name="name" type="packet_parsing_identifier" use="required"/>
	    </xs:complexType>
    </xs:element>

    <xs:element name="parser">
	    <xs:complexType>
	    	<xs:annotation><xs:documentation>A parser takes a human like input (such as json or enums) and creates data. This need not be the reverse of a printer</xs:documentation></xs:annotation>
	    	<xs:choice>
	    		<xs:element ref="builtin"/>
	  			<xs:element ref="parsehandle"/>
	  		</xs:choice>
	   		<xs:attribute name="name" type="packet_parsing_identifier" use="required"/>
	   	</xs:complexType>
   	</xs:element>

   	<xs:element name="printer">
		<xs:complexType>
	   		<xs:annotation><xs:documentation>A printer forms a human readable string from the data</xs:documentation></xs:annotation>
	    	<xs:choice>
	    		<xs:element ref="builtin"/>
	  			<xs:element ref="printhandle"/>
	  		</xs:choice>
	   		<xs:attribute name="name" type="packet_parsing_identifier" use="required"/>
  		</xs:complexType>
  	</xs:element>

  	<xs:element name="reader">
		<xs:complexType>
		    <xs:annotation><xs:documentation>A reader creates data from a byte stream</xs:documentation></xs:annotation>
		    <xs:choice>
	    		<xs:element ref="builtin"/>
	  			<xs:element ref="readhandle"/>
	  		</xs:choice>
	   		<xs:attribute name="name" type="packet_parsing_identifier" use="required"/>
   		</xs:complexType>
   	</xs:element>

   	<xs:element name="writer">
		<xs:complexType>
    		<xs:annotation><xs:documentation>A writer writes to a byte stream from the data</xs:documentation></xs:annotation>
    		<xs:choice>
	    		<xs:element ref="builtin"/>
	  			<xs:element ref="writehandle"/>
	  		</xs:choice>
	   		<xs:attribute name="name" type="packet_parsing_identifier" use="required"/>
   		</xs:complexType>
   	</xs:element>

	<xs:element name="typehandle" type="type_handle_descriptor"/>
	<xs:element name="iohandle" type="io_handle_descriptor"/>
	<xs:element name="displayhandle" type="display_handle_descriptor"/>
	<xs:element name="readhandle" type="reader_handle_descriptor"/>
	<xs:element name="writehandle" type="writer_handle_descriptor"/>
	<xs:element name="printhandle" type="printer_handle_descriptor"/>
	<xs:element name="parsehandle" type="parser_handle_descriptor"/>

	<xs:group name="iogroup">
		<xs:annotation><xs:documentation>Groups the handlers of a type used for io</xs:documentation></xs:annotation>
		<xs:choice>
   			<xs:element ref="iohandle"/>
   			<xs:sequence>
				<xs:element ref="readhandle"/>
				<xs:element ref="writehandle"/>
			</xs:sequence>
   		</xs:choice>

	</xs:group>
    <xs:group name="displaygroup">
		<xs:annotation><xs:documentation>Groups the handlers of a type used for display</xs:documentation></xs:annotation>
		<xs:choice>
			<xs:element ref="displayhandle"/>
			<xs:sequence>
				<xs:element ref="printhandle"/>
				<xs:element ref="parsehandle"/>
			</xs:sequence>
		</xs:choice>
    </xs:group>

	<xs:element name="parsed">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="gpp:parser_handle_descriptor">
					<xs:attribute name="value" type="xs:string"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>

	<xs:complexType name="module">
		<xs:annotation><xs:documentation>A module is like a field or group but with a dynamic length</xs:documentation></xs:annotation>
		<xs:sequence>
			<xs:any minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:anyAttribute/>
	</xs:complexType>

	<xs:element name="module" type="module" abstract="true">
		<xs:unique name="module_unique_pythonname">
			<xs:selector xpath="gpp:module_ref|gpp:module_imm"/>
			<xs:field xpath="@pythonname"/>
		</xs:unique>
	</xs:element>

	<xs:element name="global_module">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="module"/>
				<xs:element ref="builtin"/>
			</xs:choice>
			<xs:attribute name="name" use="required" type="gpp:packet_parsing_identifier"/>
		</xs:complexType>
	</xs:element>

	<xs:element name="module_ref">
		<xs:complexType>
			<xs:attribute name="pythonname" use="required" type="gpp:python_identifier"/>
			<xs:attribute name="ref" use="required" type="gpp:packet_parsing_identifier"/>
		</xs:complexType>
	</xs:element>

	<xs:element name="module_imm">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="gpp:module"></xs:element>
			</xs:sequence>
			<xs:attribute name="pythonname" use="required" type="gpp:python_identifier"/>
		</xs:complexType>
	</xs:element>

	<xs:group name="module">
		<xs:choice>
			<xs:element ref="module_imm"/>
			<xs:element ref="module_ref"/>
		</xs:choice>
	</xs:group>

</xs:schema>
